
import modules ;
import virtual-target ;
import property-set ;
import ac ;
import path ;
import project ;


use-project /boost : $(BOOST_ROOT) ;
use-project /luabind : $(LUABIND_ROOT) ;
use-project /lua : $(LUA_ROOT) ;


local usage-requirements = 
	<include>lv
	<library>/luabind
	<library>/lua
	<library>/boost//date_time
	<library>/boost//filesystem
	<library>/boost//system
	<library>/boost//serialization
	;


project lv
	: requirements 
		$(usage-requirements)
		<toolset>msvc:<cxxflags>-std\:c++17
		<toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS
		<toolset>msvc:<define>_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING
		<toolset>msvc:<define>_SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING
		<toolset>gcc:<cxxflags>-std=gnu++17
	: usage-requirements $(usage-requirements)
	: build-dir build
	;


rule tag-names ( name : type ? : property-set )
{
	if $(type) in STATIC_LIB SHARED_LIB EXE
	{
		if [ $(property-set).get <variant> ] = debug
		{
			name = $(name)D ;
		}

		if [ $(property-set).get <address-model> ] = 64
		{
			name = $(name)-x64 ;
		}
	}

	local result = [ virtual-target.add-prefix-and-suffix $(name) : $(type) : $(property-set) ] ;

	return $(result) ;
}


local proj =
	lv/src/lv
	lv/src/FrameWork
	lv/src/Toolkit
	#UnitTest
	#Tools/Repeater
	;

for p in $(proj)
{
	build-project $(p) ;
}

