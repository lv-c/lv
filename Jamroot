
import modules ;
import virtual-target ;
import property-set ;
import ac ;
import path ;
import project ;


BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;


project lv
	: requirements 
		<include>lv
		<include>$(BOOST_ROOT)
	: usage-requirements <include>lv
	: build-dir build
	;


rule tag-names ( name : type ? : property-set )
{
	if $(type) in STATIC_LIB SHARED_LIB EXE
	{
		if [ $(property-set).get <variant> ] = debug
		{
			name = $(name)D ;
		}

		if [ $(property-set).get <address-model> ] = 64
		{
			name = $(name)-x64 ;
		}
	}

	local result = [ virtual-target.add-prefix-and-suffix $(name) : $(type) : $(property-set) ] ;

	return $(result) ;
}


rule conditional-exclude ( properties * : header : exclude * )
{
	local prop = [ property-set.create $(properties) ] ;
	if ! [ ac.find-include-path $(prop) : $(header) ]
	{
		return $(exclude) ;
	}
}


rule build-source ( proj : exclude * )
{
	local result ;
	for s in [ project.glob-internal $(proj) : *.cpp : $(exclude) : glob-tree ]
	{
		result += <source>$(s) ;
	}

	return $(result) ;
}



local proj =
	lv/src/lv
	lv/src/FrameWork
	#lv/src/Toolkit
	#UnitTest
	#Tools/Repeater
	;

for p in $(proj)
{
	build-project $(p) ;
}

