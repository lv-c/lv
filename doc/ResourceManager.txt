文件系统:
1。支持各种资源格式， 如打包的和非打包的， 可以方便的切换各种方式
2。提供一种打包的格式：
	1)支持对指定文件或目录的压缩及加密。压缩和加密算法可以在配置文件中设置
		Q:压缩(和加密)都需要读取整个文件的样子。全部改成一个一个文件?
	2)可以方便地更新， 也就是一些小的修改不需要客户端更新一个很大的文件
	3)跨平台
3。打包后资源的读取：
	1)可以异步读取
	2)可以指定多少线程(thread pool?), 或者由当前线程调用(poll or a special thread pool?)(IOService 本身是单线程运行 fulfil)
	3)IOService 只有 fulfil 函数， 没有 add_task
	4)AsynLoader<Schedule>	:  	add_task




资源管理系统：
1。缓存机制。
2。使用 Handle?			*handle_ 可以获取具体的资源, 不能直接保存资源的引用 
3。使用的过程中不要被释放了
	1)使用 rlu 算法， 这种可能性基本不存在
	2)使用和释放资源在同一线程(dereference 也不需要 lock)
	3)lock?(消耗太大)
4。同一  Handle 类型可以用于多种管理器 (还是用模板?)
	1)不
5。Renderer 是否要知道资源管理器 (最好不要)


thread pool:
参考  boost::thread_pool

1。 Task 的 Schedule
2。 TaskList:size()
3。	How to shutdown
